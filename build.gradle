plugins {
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'checkstyle'
    id 'jacoco'
    id 'java'
    id 'maven-publish'
    //noinspection SpellCheckingInspection
    id "io.freefair.lombok" version "5.3.0"
    //noinspection SpellCheckingInspection
    id "io.toolebox.git-versioner" version "1.6.5"
    id "com.github.nagyesta.abort-mission-gradle-plugin" version "1.0.0"
}

group = 'com.github.nagyesta'
//noinspection GroovyUnusedAssignment
sourceCompatibility = '11'

project.ext {
    //noinspection GroovyAssignabilityCheck
    gitToken = project.hasProperty('githubToken') ? (project.property('githubToken') as String) : ''
    //noinspection GroovyAssignabilityCheck
    gitUser = project.hasProperty('githubUser') ? (project.property('githubUser') as String) : ''
    //noinspection GroovyAssignabilityCheck
    wikiProjectRoot = project.hasProperty('wikiProjectRoot')
            ? (project.property('wikiProjectRoot') as String)
            : "${buildDir}/reports/wiki/"
    //noinspection GroovyAssignabilityCheck
    yamlSchemaOutput = project.hasProperty('yamlSchemaOutput')
            ? (project.property('yamlSchemaOutput') as String)
            : "${projectDir}/schema/yippee-ki-json_config_schema.json"
}

versioner {
    startFrom {
        major = 0
        minor = 9
        patch = 0
    }
    pattern {
        pattern = "%M.%m.%p(.%c)"
    }
    git {
        authentication {
            https {
                token = project.ext.gitToken
            }
        }
    }
    tag {
        prefix = 'v'
        useCommitMessage = true
    }
}

repositories {
    maven {
        name = "BintrayNagyEstaMaven"
        url = uri("https://dl.bintray.com/nagyesta/releases-maven")
    }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.jayway.jsonpath:json-path'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.networknt:json-schema-validator'
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'org.glassfish:javax.el'
    implementation 'javax.el:javax.el-api'
    implementation 'commons-io:commons-io'
    implementation 'com.google.guava:guava'
    implementation 'org.jetbrains:annotations'
    implementation 'javax.inject:javax.inject'
    implementation 'ch.qos.logback:logback-classic'
    implementation 'net.steppschuh.markdowngenerator:markdowngenerator'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'com.github.tomakehurst:wiremock'
    testImplementation 'com.github.nagyesta.abort-mission.boosters:abort.booster-junit-jupiter'
}

dependencyManagement {
    implementation {
        dependencies {
            dependency 'javax.el:javax.el-api:3.0.0'
            dependency 'org.glassfish:javax.el:3.0.0'
            dependency 'com.jayway.jsonpath:json-path:2.4.0'
            dependency 'com.networknt:json-schema-validator:1.0.43'
            dependency 'org.jetbrains:annotations:20.1.0'
            dependency 'javax.inject:javax.inject:1'
            dependency 'commons-io:commons-io:2.7'
            dependency 'com.google.guava:guava:29.0-jre'
            dependency 'net.steppschuh.markdowngenerator:markdowngenerator:1.3.1.1'
        }
    }

    testImplementation {
        dependencies {
            dependency 'com.github.tomakehurst:wiremock:2.26.3'
            //use 2.1.0
            dependency 'com.github.nagyesta.abort-mission.boosters:abort.booster-junit-jupiter:2.3.0'
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("$buildDir/reports/jacoco/report.xml")
        csv.enabled false
        html.enabled true
    }
}

abortMission.toolVersion "2.3.0"

test {
    useJUnitPlatform()
}
test.finalizedBy jacocoTestReport
jacocoTestReport.finalizedBy jacocoTestCoverageVerification

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestCoverageVerification {
    inputs.file(file("${buildDir}/reports/jacoco/report.xml"))
    outputs.file(file("${buildDir}/reports/jacoco/jacocoTestCoverageVerification"))

    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
            excludes = [
                    'com.github.nagyesta.yippeekijson.core.config.parser.JsonMapper',
                    'com.github.nagyesta.yippeekijson.metadata.schema.WikiConstants',
                    'com.github.nagyesta.yippeekijson.core.config.parser.raw.RawConfigParam',
                    'com.github.nagyesta.yippeekijson.core.config.validation.FileConstraintValidator',
                    'com.github.nagyesta.yippeekijson.core.control.FilePairProcessorController',
                    'com.github.nagyesta.yippeekijson.metadata.schema.parser.WikiMetadataParser'
            ]
        }
    }
    doLast {
        file("${buildDir}/reports/jacoco/jacocoTestCoverageVerification").write("Passed")
    }
}
bootJar.dependsOn check

versioner.apply()

java {
    withJavadocJar()
    withSourcesJar()
}

bootJar {
    archiveVersion.value(project.version as String)
}

task systemTestRunConvert(type: Exec) {
    inputs.file(file(bootJar.outputs.files.singleFile))
    inputs.file(file("${buildDir}/resources/test/json/example.json"))
    inputs.file(file("${buildDir}/resources/test/yaml/example.yml"))
    outputs.file(file("${buildDir}/test-results/systemTest/example.json"))
    dependsOn bootJar

    group = "Execution"
    //noinspection GroovyAccessibility
    description = "Run the output executable jar with ExecTask"
    commandLine "java", "-jar", bootJar.outputs.files.singleFile,
            "--yippee.config=${buildDir}/resources/test/yaml/example.yml",
            "--yippee.input=${buildDir}/resources/test/json/example.json",
            "--yippee.output=${buildDir}/test-results/systemTest/example.json",
            "--yippee.action=split-name"
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.ERROR
}
task systemTestRunValidate(type: Exec) {
    inputs.file(file(bootJar.outputs.files.singleFile))
    inputs.file(file("${buildDir}/resources/test/validation/validation-input.json"))
    inputs.file(file("${buildDir}/resources/test/validation/test-schema.json"))
    inputs.file(file("${buildDir}/resources/test/yaml/all-rules.yml"))
    outputs.file(file("${buildDir}/test-results/systemTest/validation-output.json"))
    dependsOn bootJar

    group = "Execution"
    //noinspection GroovyAccessibility
    description = "Run the output executable jar with ExecTask"
    commandLine "java", "-jar", bootJar.outputs.files.singleFile,
            "--yippee.config=${buildDir}/resources/test/yaml/all-rules.yml",
            "--yippee.input=${buildDir}/resources/test/validation/validation-input.json",
            "--yippee.output=${buildDir}/test-results/systemTest/validation-output.json",
            "--yippee.action=validate"
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.ERROR
}
task systemTest {
    dependsOn systemTestRunConvert
    dependsOn systemTestRunValidate
    inputs.file(file("${buildDir}/test-results/systemTest/example.json"))
    inputs.file(file("${buildDir}/resources/test/json/example-split.json"))
    inputs.file(file("${buildDir}/test-results/systemTest/validation-output.json"))
    inputs.file(file("${buildDir}/resources/test/validation/validation-output.json"))
    outputs.file(file("${buildDir}/test-results/systemTest/result"))
    doLast {
        if (file("${buildDir}/test-results/systemTest/example.json").text
                != file("${buildDir}/resources/test/json/example-split.json").text) {
            throw new StopExecutionException("System test (convert) assertion failed.")
        }
        if (file("${buildDir}/test-results/systemTest/validation-output.json").text
                != file("${buildDir}/resources/test/validation/validation-output.json").text) {
            throw new StopExecutionException("System test (validate) assertion failed.")
        }
        file("${buildDir}/test-results/systemTest/result").write("Passed")
    }
}
task generateYamlSchema(type: Exec) {
    inputs.file(file(bootJar.outputs.files.singleFile))
    outputs.file(file(project.property("yamlSchemaOutput")))
    dependsOn bootJar

    group = "Execution"
    //noinspection GroovyAccessibility
    description = "Run the output executable jar with ExecTask"
    commandLine "java", "-jar", bootJar.outputs.files.singleFile,
            "--yippee.export-yml-schema=true",
            "--yippee.output=${project.property("yamlSchemaOutput")}"
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.ERROR
}
task generateWikiMarkdown(type: Exec) {
    inputs.file(file(bootJar.outputs.files.singleFile))
    outputs.dir(file(project.property("wikiProjectRoot")))
    dependsOn bootJar

    group = "Execution"
    //noinspection GroovyAccessibility
    description = "Run the output executable jar with ExecTask"
    commandLine "java", "-jar", bootJar.outputs.files.singleFile,
            "--yippee.export-markdown=true",
            "--yippee.output-directory=${project.property("wikiProjectRoot")}"
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.ERROR
}

tasks.withType(Checkstyle) {
    configProperties = [base_dir: rootDir.toString(), cache_file: file("${buildDir}/checkstyle/cacheFile")]
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile(rootProject.file('config/checkstyle/checkstyle-stylesheet.xsl'))
    }
}

task includeSchema(type: Copy) {
    from file("${projectDir}/schema/yippee-ki-json_config_schema.json")
    into file("${buildDir}/resources/main")
}

processResources {
    filesMatching('application.properties') {
        expand(project.properties)
    }
    finalizedBy includeSchema
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/nagyesta/yippee-ki-json")
            credentials {
                username = project.ext.gitUser
                password = project.ext.gitToken
            }
        }
    }
    publications {
        //noinspection GroovyAssignabilityCheck
        mavenJava(MavenPublication) {
            //noinspection GroovyAssignabilityCheck
            from components.java
            //noinspection GroovyAssignabilityCheck
            artifact bootJar
            pom {
                //noinspection GroovyAssignabilityCheck
                name = 'Yippee-Ki-JSON'
                //noinspection GroovyAssignabilityCheck
                description = 'A minimal JSON manipulation app built on Spring Boot and JSON Path.'
                //noinspection GroovyAssignabilityCheck
                url = 'https://github.com/nagyesta/yippee-ki-json'
                licenses {
                    license {
                        //noinspection GroovyAssignabilityCheck
                        name = 'MIT License'
                        //noinspection GroovyAssignabilityCheck
                        url = 'https://raw.githubusercontent.com/nagyesta/yippee-ki-json/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        //noinspection GroovyAssignabilityCheck
                        id = 'nagyesta'
                        //noinspection GroovyAssignabilityCheck
                        name = 'Istvan Zoltan Nagy'
                    }
                }
            }
        }
    }
}

//Disable metadata publishing and rely on Maven only
//noinspection GroovyAssignabilityCheck
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}
