//file:noinspection DependencyNotationArgument
plugins {
    alias(libs.plugins.spring.boot)
    id 'checkstyle'
    id 'jacoco'
    id 'java'
    id 'maven-publish'
    id 'signing'
    alias(libs.plugins.lombok)
    alias(libs.plugins.abort.mission)
    alias(libs.plugins.versioner)
    alias(libs.plugins.index.scan)
    alias(libs.plugins.owasp.dependencycheck)
    alias(libs.plugins.cyclonedx.bom)
    alias(libs.plugins.licensee.plugin)
    alias(libs.plugins.nexus.publish.plugin)
}

group = 'com.github.nagyesta'

apply from: "config/ossindex/ossIndexAudit.gradle"

project.ext {
    gitToken = project.hasProperty('githubToken') ? (project.property('githubToken') as String) : ''
    gitUser = project.hasProperty('githubUser') ? (project.property('githubUser') as String) : ''
    ossrhUser = project.hasProperty('ossrhUsername') ? (project.property('ossrhUsername') as String) : ''
    ossrhPass = project.hasProperty('ossrhPassword') ? (project.property('ossrhPassword') as String) : ''
    ossIndexUser = project.hasProperty('ossIndexUsername') ? (project.property('ossIndexUsername') as String) : ''
    ossIndexPass = project.hasProperty('ossIndexPassword') ? (project.property('ossIndexPassword') as String) : ''
    wikiProjectRoot = project.hasProperty('wikiProjectRoot')
            ? (project.property('wikiProjectRoot') as String)
            : project.layout.buildDirectory.dir("reports/wiki/").get().asFile.absolutePath
    yamlSchemaOutput = project.hasProperty('yamlSchemaOutput')
            ? (project.property('yamlSchemaOutput') as String)
            : "${projectDir}/schema/yippee-ki-json_config_schema.json"
    artifactDisplayName = "Yippee-Ki-JSON"
    artifactDescription = "A minimal JSON manipulation app built on Spring Boot and JSON Path."
    repoUrl = 'https://github.com/nagyesta/yippee-ki-json'
    licenseName = 'MIT License'
    licenseUrl = 'https://raw.githubusercontent.com/nagyesta/yippee-ki-json/main/LICENSE'
    maintainerId = 'nagyesta'
    maintainerName = 'Istvan Zoltan Nagy'
    maintainerUrl = 'https://github.com/nagyesta/'
    scmConnection = 'scm:git:https://github.com/nagyesta/yippee-ki-json.git'
    scmProjectUrl = 'https://github.com/nagyesta/yippee-ki-json'

}

versioner {
    startFrom {
        major = 1
        minor = 6
        patch = 52
    }
    match {
        major = "{major}"
        minor = "{minor}"
        patch = "{patch}"
    }
    pattern {
        pattern = "%M.%m.%p"
    }
    git {
        authentication {
            https {
                token = project.ext.gitToken
            }
        }
    }
    tag {
        prefix = 'v'
        useCommitMessage = true
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation libs.bundles.spring.boot
    implementation libs.bundles.json
    implementation libs.bundles.logback
    implementation libs.bundles.validation
    implementation libs.commons.io
    implementation libs.commons.lang3
    implementation libs.jetbrains.annotations
    implementation libs.jakarta.inject
    implementation libs.findbugs.jsr305
    implementation libs.markdowngenerator
    annotationProcessor libs.lombok
    developmentOnly libs.spring.boot.devtools
    testImplementation libs.guava
    testImplementation(libs.spring.boot.starter.test) {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation libs.wiremock
    testImplementation libs.abort.mission.jupiter
}

cyclonedxBom {
    includeConfigs = ["runtimeClasspath"]
    skipConfigs = ["compileClasspath", "testCompileClasspath"]
    skipProjects = []
    projectType = project.name == "lowkey-vault-app" ? "application" : "library"
    schemaVersion = "1.5"
    destination = file("build/reports")
    outputName = "bom"
    outputFormat = "json"
    //noinspection UnnecessaryQualifiedReference
    final def attachmentText = new org.cyclonedx.model.AttachmentText()
    attachmentText.setText(file("LICENSE").readBytes().encodeBase64().toString())
    attachmentText.setEncoding("base64")
    attachmentText.setContentType("text/plain")
    //noinspection UnnecessaryQualifiedReference
    final def license = new org.cyclonedx.model.License()
    license.setName(project.ext.licenseName)
    license.setLicenseText(attachmentText)
    license.setUrl(project.ext.licenseUrl)
    setLicenseChoice {
        it.addLicense(license)
    }
}

licensee {
    allow("Apache-2.0")
    allow("MIT")
    allow("EPL-1.0")
    allow("GPL-2.0-with-classpath-exception")
    allowUrl("https://asm.ow2.io/license.html")
}

tasks.register('copyLegalDocs', Copy.class) {
    from file("${projectDir}/LICENSE")
    from layout.buildDirectory.file("reports/licensee/artifacts.json").get().asFile
    from layout.buildDirectory.file("reports/bom.json").get().asFile
    into layout.buildDirectory.dir("resources/main/META-INF").get().asFile
    rename('artifacts.json', 'dependency-licenses.json')
    rename('bom.json', 'SBOM.json')
}
tasks.copyLegalDocs.dependsOn(tasks.licensee)
tasks.copyLegalDocs.dependsOn(tasks.cyclonedxBom)
tasks.javadoc.dependsOn(tasks.copyLegalDocs)
tasks.compileTestJava.dependsOn(tasks.copyLegalDocs)
tasks.checkstyleMain.dependsOn(tasks.copyLegalDocs)
tasks.resolveMainClassName.dependsOn(tasks.copyLegalDocs)
tasks.processResources.finalizedBy(tasks.copyLegalDocs)

jacocoTestReport {
    reports {
        xml.required.set(true)
        xml.outputLocation.set(project.layout.buildDirectory.file("reports/jacoco/report.xml").get().asFile)
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(project.layout.buildDirectory.dir("reports/jacoco/html").get().asFile)
    }
}

abortMission.toolVersion libs.versions.abortMission.get()

test {
    useJUnitPlatform()
    systemProperty("junit.jupiter.execution.parallel.enabled", true)
    systemProperty("junit.jupiter.execution.parallel.mode.default", "concurrent")
    systemProperty("junit.jupiter.execution.parallel.mode.classes.default", "same_thread")
}
test.finalizedBy jacocoTestReport
jacocoTestReport.finalizedBy jacocoTestCoverageVerification

jacoco {
    toolVersion = libs.versions.jacoco.get()
}

jacocoTestCoverageVerification {
    inputs.file(project.layout.buildDirectory.file("reports/jacoco/report.xml").get().asFile)
    outputs.file(project.layout.buildDirectory.file("reports/jacoco/jacocoTestCoverageVerification").get().asFile)

    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
            excludes = [
                    'com.github.nagyesta.yippeekijson.core.config.parser.JsonMapper',
                    'com.github.nagyesta.yippeekijson.metadata.schema.WikiConstants',
                    'com.github.nagyesta.yippeekijson.core.config.parser.raw.RawConfigParam',
                    'com.github.nagyesta.yippeekijson.core.config.validation.FileConstraintValidator',
                    'com.github.nagyesta.yippeekijson.core.control.FilePairProcessorController',
                    'com.github.nagyesta.yippeekijson.metadata.schema.parser.WikiMetadataParser'
            ]
        }
    }
    doLast {
        project.layout.buildDirectory.file("reports/jacoco/jacocoTestCoverageVerification").get().asFile.write("Passed")
    }
}
bootJar.dependsOn check

versioner.apply()

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

bootJar {
    archiveVersion.value(project.version as String)
}

tasks.register('systemTestRunConvert', Exec.class) {
    inputs.file(file(bootJar.outputs.files.singleFile))
    inputs.file(project.layout.buildDirectory.file("resources/test/json/example.json").get().asFile)
    inputs.file(project.layout.buildDirectory.file("resources/test/yaml/example.yml").get().asFile)
    outputs.file(project.layout.buildDirectory.file("test-results/systemTest/example.json").get().asFile)
    dependsOn bootJar

    group = "Execution"
    //noinspection GroovyAccessibility
    description = "Run the output executable jar with ExecTask"
    commandLine "${System.properties.'java.home'}/bin/java", "-jar", bootJar.outputs.files.singleFile,
            "--yippee.config=${project.layout.buildDirectory.file('resources/test/yaml/example.yml').get().asFile}",
            "--yippee.input=${project.layout.buildDirectory.file('resources/test/json/example.json').get().asFile}",
            "--yippee.output=${project.layout.buildDirectory.file('test-results/systemTest/example.json').get().asFile}",
            "--yippee.action=split-name"
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.ERROR
}
tasks.register('systemTestRunValidate', Exec.class) {
    inputs.file(file(bootJar.outputs.files.singleFile))
    inputs.file(project.layout.buildDirectory.file("resources/test/validation/validation-input.json").get().asFile)
    inputs.file(project.layout.buildDirectory.file("resources/test/validation/test-schema.json").get().asFile)
    inputs.file(project.layout.buildDirectory.file("resources/test/yaml/all-rules.yml").get().asFile)
    outputs.file(project.layout.buildDirectory.file("test-results/systemTest/validation-output.json").get().asFile)
    dependsOn bootJar

    group = "Execution"
    //noinspection GroovyAccessibility
    description = "Run the output executable jar with ExecTask"
    commandLine "${System.properties.'java.home'}/bin/java", "-jar", bootJar.outputs.files.singleFile,
            "--yippee.config=${project.layout.buildDirectory.file('resources/test/yaml/all-rules.yml').get().asFile}",
            "--yippee.input=${project.layout.buildDirectory.file('resources/test/validation/validation-input.json').get().asFile}",
            "--yippee.output=${project.layout.buildDirectory.file('test-results/systemTest/validation-output.json').get().asFile}",
            "--yippee.action=validate"
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.ERROR
}
tasks.register('systemTest') {
    dependsOn systemTestRunConvert
    dependsOn systemTestRunValidate
    inputs.file(project.layout.buildDirectory.file("test-results/systemTest/example.json").get().asFile)
    inputs.file(project.layout.buildDirectory.file("resources/test/json/example-split.json").get().asFile)
    inputs.file(project.layout.buildDirectory.file("test-results/systemTest/validation-output.json").get().asFile)
    inputs.file(project.layout.buildDirectory.file("resources/test/validation/validation-output.json").get().asFile)
    outputs.file(project.layout.buildDirectory.file("test-results/systemTest/result").get().asFile)
    doLast {
        if (project.layout.buildDirectory.file("test-results/systemTest/example.json").get().asFile.text
                != project.layout.buildDirectory.file("resources/test/json/example-split.json").get().asFile.text) {
            throw new StopExecutionException("System test (convert) assertion failed.")
        }
        if (project.layout.buildDirectory.file("test-results/systemTest/validation-output.json").get().asFile.text
                != project.layout.buildDirectory.file("resources/test/validation/validation-output.json").get().asFile.text) {
            throw new StopExecutionException("System test (validate) assertion failed.")
        }
        project.layout.buildDirectory.file("test-results/systemTest/result").get().asFile.write("Passed")
    }
}
tasks.register('generateYamlSchema', Exec.class) {
    inputs.file(file(bootJar.outputs.files.singleFile))
    outputs.file(file(project.property("yamlSchemaOutput")))
    dependsOn bootJar

    group = "Execution"
    //noinspection GroovyAccessibility
    description = "Run the output executable jar with ExecTask"
    commandLine "${System.properties.'java.home'}/bin/java", "-jar", bootJar.outputs.files.singleFile,
            "--yippee.export-yml-schema=true",
            "--yippee.output=${project.property("yamlSchemaOutput")}"
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.ERROR
}
tasks.register('generateWikiMarkdown', Exec.class) {
    inputs.file(file(bootJar.outputs.files.singleFile))
    outputs.dir(file(project.property("wikiProjectRoot")))
    dependsOn bootJar

    group = "Execution"
    //noinspection GroovyAccessibility
    description = "Run the output executable jar with ExecTask"
    commandLine "${System.properties.'java.home'}/bin/java", "-jar", bootJar.outputs.files.singleFile,
            "--yippee.export-markdown=true",
            "--yippee.output-directory=${project.property("wikiProjectRoot")}"
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.ERROR
}

tasks.withType(Checkstyle).configureEach {
    configProperties = [
            base_dir  : rootDir.toString(),
            cache_file: project.layout.buildDirectory.file("checkstyle/cacheFile").get().asFile
    ]
    reports {
        xml.required.set(false)
        html.required.set(true)
        html.stylesheet resources.text
                .fromFile(rootProject.file('config/checkstyle/checkstyle-stylesheet.xsl') as String)
    }
}
checkstyle.toolVersion = libs.versions.checkstyle.get()

tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:syntax', '-quiet')
}

tasks.register('includeSchema', Copy.class) {
    from file("${projectDir}/schema/yippee-ki-json_config_schema.json")
    into project.layout.buildDirectory.dir("resources/main").get().asFile
}
resolveMainClassName.dependsOn includeSchema
javadoc.dependsOn includeSchema
checkstyleMain.dependsOn includeSchema
compileTestJava.dependsOn includeSchema
checkstyleTest.dependsOn includeSchema

processResources {
    filesMatching('application.properties') {
        expand(project.properties)
    }
    finalizedBy includeSchema
}

nexusPublishing {
    repositories {
        sonatype {
            username = project.ext.ossrhUser
            password = project.ext.ossrhPass
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/nagyesta/yippee-ki-json")
            credentials {
                username = project.ext.gitUser
                password = project.ext.gitToken
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact bootJar
            pom {
                name = project.ext.artifactDisplayName
                description = project.ext.artifactDescription
                url = project.ext.repoUrl
                packaging = 'jar'
                licenses {
                    license {
                        name = project.ext.licenseName
                        url = project.ext.licenseUrl
                    }
                }
                developers {
                    developer {
                        id = project.ext.maintainerId
                        name = project.ext.maintainerName
                        url = project.ext.maintainerUrl
                    }
                }
                scm {
                    connection = project.ext.scmConnection
                    developerConnection = project.ext.scmConnection
                    url = project.ext.scmProjectUrl
                }
                withXml {
                    //noinspection GroovyImplicitNullArgumentCall
                    asNode().dependencies.findAll() {
                        final def parent = it.parent()
                        parent.remove(it)
                    }
                    //noinspection GroovyImplicitNullArgumentCall
                    asNode().dependencyManagement.findAll() {
                        final def parent = it.parent()
                        parent.remove(it)
                    }
                }
            }
        }
    }
}

//Disable metadata publishing and rely on Maven only
//noinspection GroovyAssignabilityCheck
tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

jar {
    enabled = false
}

ossIndexAudit {
    username = rootProject.ext.ossIndexUser
    password = rootProject.ext.ossIndexPass
    printBanner = false
    colorEnabled = true
    showAll = false
    outputFormat = 'DEPENDENCY_GRAPH'
    excludeVulnerabilityIds = rootProject.ext.ossIndexExclusions
}

signing {
    sign publishing.publications.mavenJava
}
