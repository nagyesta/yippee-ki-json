{
  "$id": "https://github.com/nagyesta/yippee-ki-json/blob/main/schema/yippee-ki-json_config_predicate-type.json",
  "$schema": "http://json-schema.org/draft-07/schema",
  "$comment": "https://github.com/nagyesta/yippee-ki-json/wiki/Built-in-predicates",
  "definitions": {
    "predicateAllMatch": {
      "type": "object",
      "$comment": "https://github.com/nagyesta/yippee-ki-json/wiki/Built-in-predicates#all-match-predicate",
      "properties": {
        "name": {
          "type": "string",
          "const": "allMatch",
          "description": "The name of the predicate."
        },
        "from": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "yippee-ki-json_config_predicate-type.json"
          },
          "description": "The array of predicates we need to evaluate one by one."
        }
      },
      "required": [
        "name",
        "from"
      ],
      "uniqueItems": true,
      "minProperties": 2,
      "maxProperties": 2,
      "additionalProperties": false
    },
    "predicateAnyMatch": {
      "type": "object",
      "$comment": "https://github.com/nagyesta/yippee-ki-json/wiki/Built-in-predicates#any-match-predicate",
      "properties": {
        "name": {
          "type": "string",
          "const": "anyMatch",
          "description": "The name of the predicate."
        },
        "from": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "yippee-ki-json_config_predicate-type.json"
          },
          "description": "The array of predicates we need to evaluate one by one."
        }
      },
      "required": [
        "name",
        "from"
      ],
      "uniqueItems": true,
      "minProperties": 2,
      "maxProperties": 2,
      "additionalProperties": false
    },
    "predicateAnyString": {
      "type": "object",
      "$comment": "https://github.com/nagyesta/yippee-ki-json/wiki/Built-in-predicates#any-string-predicate",
      "properties": {
        "name": {
          "type": "string",
          "const": "anyString",
          "description": "The name of the predicate."
        }
      },
      "required": [
        "name"
      ],
      "minProperties": 1,
      "maxProperties": 1,
      "additionalProperties": false
    },
    "predicateContainsKey": {
      "type": "object",
      "$comment": "https://github.com/nagyesta/yippee-ki-json/wiki/Built-in-predicates#contains-key-predicate",
      "properties": {
        "name": {
          "type": "string",
          "const": "containsKey",
          "description": "The name of the predicate."
        },
        "key": {
          "type": "string",
          "pattern": "[a-zA-Z]+[a-zA-Z0-9\\-_]+",
          "description": "The key that needs to be verified that it is present."
        }
      },
      "required": [
        "name",
        "key"
      ],
      "uniqueItems": true,
      "minProperties": 2,
      "maxProperties": 2,
      "additionalProperties": false
    },
    "predicateEvalOn": {
      "type": "object",
      "$comment": "https://github.com/nagyesta/yippee-ki-json/wiki/Built-in-predicates#eval-on-predicate",
      "properties": {
        "name": {
          "type": "string",
          "const": "evalOn",
          "description": "The name of the predicate."
        },
        "childPath": {
          "type": "string",
          "pattern": "([a-zA-Z]+[a-zA-Z0-9\\-_]+)(.[a-zA-Z]+[a-zA-Z0-9\\-_]+)*",
          "description": "The path (relative to the rule's JSON Path) in a dotted format."
        },
        "predicate": {
          "allOf": [
            {
              "$ref": "yippee-ki-json_config_predicate-type.json"
            },
            {
              "description": "The predicate we need to evaluate."
            }
          ]
        }
      },
      "required": [
        "name",
        "childPath",
        "predicate"
      ],
      "uniqueItems": true,
      "minProperties": 3,
      "maxProperties": 3,
      "additionalProperties": false
    },
    "predicateIsNull": {
      "type": "object",
      "$comment": "https://github.com/nagyesta/yippee-ki-json/wiki/Built-in-predicates#is-null-predicate",
      "properties": {
        "name": {
          "type": "string",
          "const": "isNull",
          "description": "The name of the predicate."
        }
      },
      "required": [
        "name"
      ],
      "minProperties": 1,
      "maxProperties": 1,
      "additionalProperties": false
    },
    "predicateNoneMatch": {
      "type": "object",
      "$comment": "https://github.com/nagyesta/yippee-ki-json/wiki/Built-in-predicates#none-match-predicate",
      "properties": {
        "name": {
          "type": "string",
          "const": "noneMatch",
          "description": "The name of the predicate."
        },
        "from": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "yippee-ki-json_config_predicate-type.json"
          },
          "description": "The array of predicates we need to evaluate one by one."
        }
      },
      "required": [
        "name",
        "from"
      ],
      "minProperties": 2,
      "maxProperties": 2,
      "additionalProperties": false
    },
    "predicateNonNull": {
      "type": "object",
      "$comment": "https://github.com/nagyesta/yippee-ki-json/wiki/Built-in-predicates#non-null-predicate",
      "properties": {
        "name": {
          "type": "string",
          "const": "notNull",
          "description": "The name of the predicate."
        }
      },
      "required": [
        "name"
      ],
      "minProperties": 1,
      "maxProperties": 1,
      "additionalProperties": false
    },
    "predicateRegex": {
      "type": "object",
      "$comment": "https://github.com/nagyesta/yippee-ki-json/wiki/Built-in-predicates#regex-predicate",
      "properties": {
        "name": {
          "type": "string",
          "const": "regex",
          "description": "The name of the predicate."
        },
        "pattern": {
          "type": "string",
          "description": "The regular expression we need to evaluate."
        }
      },
      "required": [
        "name",
        "pattern"
      ],
      "uniqueItems": true,
      "minProperties": 2,
      "maxProperties": 2,
      "additionalProperties": false
    },
    "predicateSpEL": {
      "type": "object",
      "$comment": "https://github.com/nagyesta/yippee-ki-json/wiki/Built-in-predicates#spel-predicate",
      "properties": {
        "name": {
          "type": "string",
          "const": "SpEL",
          "description": "The name of the predicate."
        },
        "expression": {
          "type": "string",
          "description": "The SpEL expression we need to evaluate."
        }
      },
      "required": [
        "name",
        "expression"
      ],
      "uniqueItems": true,
      "minProperties": 2,
      "maxProperties": 2,
      "additionalProperties": false
    }
  },
  "allOf": [
    {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "allMatch",
            "anyMatch",
            "anyString",
            "containsKey",
            "evalOn",
            "isNull",
            "noneMatch",
            "notNull",
            "regex",
            "SpEL"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    {
      "if": {
        "properties": {
          "name": {
            "const": "allMatch"
          }
        }
      },
      "then": {
        "$ref": "#/definitions/predicateAllMatch"
      }
    },
    {
      "if": {
        "properties": {
          "name": {
            "const": "anyMatch"
          }
        }
      },
      "then": {
        "$ref": "#/definitions/predicateAnyMatch"
      }
    },
    {
      "if": {
        "properties": {
          "name": {
            "const": "anyString"
          }
        }
      },
      "then": {
        "$ref": "#/definitions/predicateAnyString"
      }
    },
    {
      "if": {
        "properties": {
          "name": {
            "const": "containsKey"
          }
        }
      },
      "then": {
        "$ref": "#/definitions/predicateContainsKey"
      }
    },
    {
      "if": {
        "properties": {
          "name": {
            "const": "evalOn"
          }
        }
      },
      "then": {
        "$ref": "#/definitions/predicateEvalOn"
      }
    },
    {
      "if": {
        "properties": {
          "name": {
            "const": "isNull"
          }
        }
      },
      "then": {
        "$ref": "#/definitions/predicateIsNull"
      }
    },
    {
      "if": {
        "properties": {
          "name": {
            "const": "noneMatch"
          }
        }
      },
      "then": {
        "$ref": "#/definitions/predicateNoneMatch"
      }
    },
    {
      "if": {
        "properties": {
          "name": {
            "const": "notNull"
          }
        }
      },
      "then": {
        "$ref": "#/definitions/predicateNonNull"
      }
    },
    {
      "if": {
        "properties": {
          "name": {
            "const": "regex"
          }
        }
      },
      "then": {
        "$ref": "#/definitions/predicateRegex"
      }
    },
    {
      "if": {
        "properties": {
          "name": {
            "const": "SpEL"
          }
        }
      },
      "then": {
        "$ref": "#/definitions/predicateSpEL"
      }
    }
  ]
}